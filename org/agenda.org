#+TITLE: Game and Robotics Programming with Snap! and Python
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: UBMS - SUMMER 2023
#+OPTIONS: toc:1 num:nil ^:nil
#+STARTUP: overview hideblocks indent inlineimages
#+property: header-args:R :results output :session *R*
* README
#+attr_html: :width 400px
[[../img/readme.png]]

- Agenda overview - what I had planned and what we achieved in each
  session of the course.

- If we don't manage to finish a topic in one session, it'll be
  finished in the subsequent session(s) without change of the
  originally date.

- See the course syllabus for a detailed (tentative) schedule.

* DONE Welcome & orientation (June-12)
#+attr_html: :width 400px
[[../img/westworld.jpg]]

- [ ] Welcome to the course
- [ ] Who Am I? Who Are You?
- [ ] What we're going to do (and where)?
- [ ] What should you write (for your research paper)?

** Who am I?
#+attr_html: :width 400px
#+caption: Hillside in Tuscany, Italy
[[../img/italy.jpg]]

1) *One memorable thing about me.*

2) *Why I am in this course.*

3) *What I would really like (for this course)*.

4) *What I would not like (for this course)*.

5) *My word for today.*

** Who are you?
#+attr_html: :width 400px
#+caption: Berlin Prenzlauer Berg in Winter
[[../img/berlin.jpg]]

1) What's your *name*? (And where you're from)

2) What's your main *interest* (at Lyon)?

3) What's your main *interest* (outside of Lyon)?

4) What would you like to *take away* from this course?

5) What would you like to *avoid* in this course?

6) What's your *word* for today?

** What're we going to do (and where)?
#+attr_html: :width 250px
#+caption: Cover, Joshi, Learn CS Concepts with Snap! (2020)
[[../img/joshi.png]] [[../img/github.png]]
[[../img/canvas.png]] [[../img/berkeley.png]]

- [[https://lyon.instructure.com/courses/1721][Canvas: links, assignments, quizzes, syllabus & zooms]]
- [[https://github.com/birkenkrahe/ubms/tree/main][GitHub:]] lectures, agenda, materials, issues
- [[http://www.abhayjoshi.net/spark/snap/bsnap.pdf][Textbook to read during or ahead (Joshi, 2020)]]
- [[https://snap.berkeley.edu/][Berkeley U. Snap! Homepage]] for projects and examples
- Snap!Chat (Google Space) for anything anytime (new!)

** What should you write (and how)?
#+attr_html: :width 400px
#+Caption: xkcd - Research Risks (1904)
[[../img/research_risks.png]]

- [[https://lyon.instructure.com/courses/1721/assignments/syllabus#org08c5883][Pick one topic]] (duplications are allowed)
- Start researching (but how?)
- Suggestion: 'How to read?' ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-should-you-read][FAQ]])
- IMRaD - scientific publications ([[https://youtu.be/dip7UwZ3wUM][YouTube]])
- SCQA - Thank you, Barbara Minto [[https://vimeo.com/305393045][(video]])
- [[https://scrum.org][Scrum]] (agile project management)
- AI assistance (why/why not/how?) - [[https://shareg.pt/QVceRW4][example]]

** Summary
#+attr_html: :width 400px
#+caption: Bob Bartlett and local during Bartlett's Arctic expedition (1933)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1iBhu3-mnmYxJVrsiqV-WefyZLFR2hoKy?usp=sharing][For whiteboard photos, see here (GDrive)]]

- Your *interests* included: engineering (incl. aerospace, software),
  CAD/CAM, art history, fiction writing, video game design, baseball,
  forensic science, and more.
- To avoid *negative* experiences: keep up (don't fall behind), be bold
  (don't be shy), stay calm (don't panic), keep things interesting
  (don't get bored).
- Sometimes, however, "falling behind" can be an important learning
  (it was for me when, at your age, I was too full of myself).
- *Words* included: paradox, JavaScript, black hole, game design, Italy.
- My background: [[https://www.nature.com/subjects/theoretical-particle-physics#:~:text=Theoretical%20particle%20physics%20is%20the,prevailing%20theory%3A%20the%20standard%20model.][theoretical particle physics]] (à la Sheldon
  Cooper). For some of my own publications, see researchgate.net.
- Johann Wolfgang von Goethe: famous German writer and polymath
  ([[https://en.wikipedia.org/wiki/Johann_Wolfgang_von_Goethe][Wikipedia]]).
- [[https://xkcd.com][xkcd]]: daily cartoons for nerds, "a webcomic of romance, sarcasm,
  math, and language."
- *Research:* use IMRaD (Introduction = what're you investigating?,
  Method = how did you do it?, Results = what did you find out, and
  Discussion = what does it mean? with limitations).
- *Read* stuff at different levels: from shallow to deep.
- *[[https://arxiv.org][arxiv.org]]* - preprint server for scientific papers at Cornell U.
  #+attr_latex: :width 400px
  [[../img/arxiv.png]]
- *SCQA* = Situation (what you already know) + Complication (what you
  don't know) + Question (what you want to know) + Answer
- *Scrum* (term comes from Rugby) - an agile project management method
  to split a project into different periods each closed by a 'sprint
  review' where the team discusses progress with the customer.
- AI assistance (e.g. ChatGPT): yes, as long as you use it for
  drafting, reference it, and don't believe everything it says.
  #+attr_html: :width 400px
  [[../img/batman_robin.png]]

- *Plagiarism* is when you use someone else's intellectual capital
  (his/her thoughts, writings, images, code etc.) without giving
  credit (through direct reference).
- Earliest chatbot (1966): ELIZA, the digital therapist ([[https://web.njit.edu/~ronkowit/eliza.html][try it here]]).
  #+attr_latex: :width 400px
  [[../img/eliza.png]]

** References
#+attr_latex: :width 400px
[[../img/library.jpg]]

- xkcd (2017). Research Risks. URL: [[https://xkcd.com/1904/][xkcd.com/1904/]]
- Joshi, A.D. (2020). Learn CS Concepts With Snap! URL: [[http://www.abhayjoshi.net/spark/snap/bsnap.pdf][abhayjoshi.net]]
- Harrison Metal (2019). Than You, Barbara Minto. URL: [[https://vimeo.com/305393045][vimeo.com]]
- OpenAI (May 24, 2023). ChatGPT (GPT-4). URL: [[https://chat.openai.com/?model=gpt-4][chat.openai.com]]

* DONE Introduction to Snap! (June-13)
#+attr_html: :width 400px
[[../img/snaplogo.png]]

** Quiz 1 is available in Canvas - complete it now!
#+attr_html: :width 400px
[[../img/quiz.png]]

- There will be occasional quizzes to test your understanding.

- While there's no grade, I'll use the [[https://github.com/birkenkrahe/ubms/blob/main/org/syllabus.org][syllabus criteria]] to assess
  your performance.

- You can check it yourself in the [[https://lyon.instructure.com/courses/1721/grades][gradebook in Canvas]] at any time.

** Leftovers

- You can check out the summary for yesterday's topics in this file
  (also in GitHub - go there now: [[https://github.com/birkenkrahe/ubms][github.com/birkenkrahe/ubms]])
- Check out the Google Snap!Chat for interesting things - go there now
  (sidebar in Lyon Google Mail)!
  #+attr_latex: :width 400px
  [[../img/snapchat.png]]

** Today's lecture: introduction to Snap!
#+attr_latex: :width 400px
[[../img/lecture.jpg]]

- I lecture while you open the Snap! editor/browser
- You code along at your leisure or at my behest
- The session always closes with a practice session
- Sometimes we'll code a programming assignment in class
- Anything you don't get done you can finish on your own time

** Summary
#+attr_html: :width 400px
#+caption: Bob Bartlett and local during Bartlett's Arctic expedition (1933)
[[../img/summary.jpg]]

[[https://drive.google.com/drive/folders/1iBhu3-mnmYxJVrsiqV-WefyZLFR2hoKy?usp=sharing][For whiteboard photos, see here (GDrive)]]

- Quiz 1, testing retention of yesterday's class content
- Syllabus: quizzes, gradebook, tentative schedule
- Snap! vs. Scratch (recursive functions, data structures)
- Where do data come from? IoT (Internet of Things)
- Ranking of Programming Languages: [[https://www.tiobe.com/tiobe-index/][TIOBE Index]]
- "The Importance Of Being Earnest" - Victorian play by Oscar Wilde
- How many programming languages are there? (ca. 250 in use, more than
  8,000 known/listed at [[https://hopl.info/][HOPL]]
- Snap! interface, downloading and installing desktop app
- Snap! online, cellular automata and time machine demo
- Punch cards, FORTRAN, importance and limits of programming skills
- Critical thinking skills, what they mean and when they're useful

From the Snap!Chat (Google Space accessible via your Lyon GMail):
- See here for a free ebook on Conway's Game of Life and the cellular
  automata behind it: Johnston/Greene (2022):
  https://conwaylife.com/book/. Cellular automata have many
  interesting applications: fluid dynamics simulations in physics,
  plant growth processes in biology, pseudo random number generation
  in cryptography, traffic flow modeling, city growth patterns in
  urban planning, spread of forest fires in ecology, chemical reaction
  models in chemistry, terrain generation in game development, etc.
- It's time for you to find out what Germans are really like:
  https://qr.ae/pyHxgq - image: the [[https://en.wikipedia.org/wiki/Heinzelm%C3%A4nnchen][Heinzelmännchen of Cologne]]
  #+attr_latex: :width 400px
  [[../img/heinzelmann.png]]

* DONE First Snap! script (June-14)
#+attr_latex: :width 400px
[[../img/snap_FirstProjectSolution.png]]

** Snap! app in the browser/on the desktop

- To add Snap! as a browser shortcut (only for online Snap!):
  1) open snap.berkeley.edu/snap/snap.html in Google Chrome
  2) click on the three dots in the upper right corner
  3) select ~More tools~
  4) select ~Create shortcut~
  5) name the shortcut ~Snap!~ and check the ~Open as window~ box
  6) click ~Create~ - this will add a shortcut to desktop and Start Menu
- You can also add the local copy of ~Snap!~ but you have to do this manually via the File Explorer.

** Summary
#+attr_html: :width 400px
#+caption: Bob Bartlett and local during Bartlett's Arctic expedition (1933)
[[../img/summary.jpg]]

[[https://drive.google.com/drive/folders/1iBhu3-mnmYxJVrsiqV-WefyZLFR2hoKy?usp=sharing][For whiteboard photos, see here (GDrive)]]

- Why Snap! (and not Python for programming beginners and tourists)
- Snap! userinterface, UI/UX as a career field in IT/design
- Building a Snap! script
- Saving a Snap! project locally or in the cloud
- Sharing a project in the cloud
- Changing a sprite's costume
- Changing the stage background
- Making a sprite move around at random, with a time delay

* DONE Sequence sounds (June-15)
#+attr_html: :width 400px
[[../img/snap_dog.png]]

- Using Snap!Chat: Abby's question ("Eliza" chatbot in Snap!)
  #+attr_latex: :width 400px
  [[../img/list.png]]

- [[https://lyon.instructure.com/courses/1721/assignments/14952/edit?quiz_lti][Quiz 2: first look at Snap!]] - 09:30-09:45 hrs

- [[https://lyon.instructure.com/courses/1721/assignments/14943][Exercise: "Alonzo in an aquarium"]] (Upload XML file) - 09:45-10 hrs

- Lecture + codealong + practice: Sequence and sounds ([[https://github.com/birkenkrahe/ubms/blob/main/org/3_sequence_sounds.org][GitHub]])

- [[https://lyon.instructure.com/courses/1721/assignments/14944][Exercise: "Soundbites"]] (Upload URL to cloud location by Friday 9 am)

** Quiz 1 and quiz 2 results visualized

- Put test results in a vector and print histogram and boxplot next to
  one another: for quiz 1
  #+begin_src R :results output graphics file :file ../img/q1.png
    q1 <- c(7.25,7.25,8.00,8.25,8.25,8.50,8.50,8.50,9.00,9.25,9.25,9.50)

    par(mfrow=c(1,2),pty='s')
    hist(q1,main="",xlab="Points")
    title("Histogram Quiz 1 results")
    boxplot(q1,horizontal=TRUE,xlab="Points")
    title("Boxplot Quiz 1 results")
  #+end_src

  #+RESULTS:
  [[file:../img/q1.png]]

- And for quiz 2:
  #+begin_src R :results output graphics file :file ../img/q2.png
    q2 <- c(2.00,4.25,4.50,5.75,5.75,6.00,6.50,6.75,7.25,7.50,8.50)

    par(mfrow=c(1,2),pty='s')
    hist(q2,main="",xlab="Points")
    title("Histogram Quiz 2 results")
    boxplot(q2,horizontal=TRUE,xlab="Points")
    title("Boxplot Quiz 2 results")
  #+end_src

  #+RESULTS:
  [[file:../img/q2.png]]

- Compare the Quiz 1,2 results using the two boxplots (scales aligned):
  #+begin_src R :results output graphics file :file ../img/q1q2.png
    par(mfrow=c(2,1))
    lim = c(min(q1,q2),max(q1,q2))
    boxplot(q1,horizontal=TRUE,xlab="", col="green",
            ylim=lim)
    title("Quiz 1 results")
    boxplot(q2,horizontal=TRUE,xlab="Points", col = "red",
            ylim=lim)
    title("Quiz 2 results")
  #+end_src

  #+RESULTS:
  [[file:../img/q1q2.png]]

** Summary
#+attr_html: :width 400px
#+caption: Bob Bartlett and local during Bartlett's Arctic expedition (1933)
[[../img/summary.jpg]]

[[https://drive.google.com/drive/folders/1iBhu3-mnmYxJVrsiqV-WefyZLFR2hoKy?usp=sharing][For whiteboard photos, see here (GDrive)]]

- Computers required exact syntactically correct sequences of
  instructions to work at all.
- A typical animation sequence includes at least code from: MOTION
  (sprite movement), CONTROL (program flow), and LOOKS (appearance and
  messages).
- You can upload sounds from the web (as long as the copyright permits
  it), or from the Snap! cloud platform, or record your own directly
  in the editor.
- Some commands will have to complete an action until the script can
  continue, others will cause an action and simply continue even if
  the action is not completed.
- BPMN (Business Process Model and Notation) is a process model
  language to create model diagrams (like blueprints).
- You can use BPMN to chart the flow of Snap! scripts.
  
* DONE Loops and costumes (June-16)
#+attr_html: :width 400px
[[../img/loop.jpg]]

** [[https://lyon.instructure.com/courses/1721/assignments/14953/edit?quiz_lti][Quiz 3 - sequence and sounds]] (9:30-9:45 hrs)

- Quiz is open book: all resources, online or offline are allowed

- The students with the best results used most of the time

- The students who stayed below 5 minutes got below 50%

** Quiz 2 review

1) "Snap" is actually also a term from the Linux world
   
2) What is 'exception handling'?
   #+begin_quote
   - If the user does something that leads to a wrong input - wrong in
     the sense that the program reacts with an error. Such an
     'exception' - e.g. entering a NAME when a NUMBER is required - is
     handled if the program is prepared for it.
   - Slow apps on your phone or inability to find something online is
     not relevant: exception handling is something the coder does to
     the code.
   #+end_quote

** Review (program submissions)

- Most programs were okay, very few were perfect. Gotta make sure when
  you submit the URL to your online project that the program works
  (e.g. when the sprite doesn't show then it won't work). Missing out
  on parts of the requirements list cost you points - just like in life!

- There should be enough time to complete these in class. Let me know
  if not then I'll make the necessary changes.

- What you don't want in programming (or anywhere else): lose touch
  with the material at the start when it's still easy. Smart students
  start strong and finish strong, and can take it easier in the
  middle.

** Research essay topics

- A couple of people asked for special topics: as long as you come up
  with a good, suitable research question, I'm OK.
  
- Put the question that you want to investigate [[https://lyon.instructure.com/courses/1721/pages/put-your-research-essay-topic-here][in this table]] in
  'Pages' in Canvas, together with your name and any comments you may
  have.
  
- Any other research talk: let's have a conversation in the Snap!Chat.

- Remember that good research questions are very, very
  specific. E.g. "What is the impact of AI on the world?" is not
  doable, but "What is the impact of AI on the computer science
  education in a high school in North Eastern Arkansas? is doable and
  specific enough to be investigated with pleasure and chance of
  success.

** [[https://github.com/birkenkrahe/ubms/blob/main/org/4_looping_costumes.org][Today: controlling animation - looping and rotation]]
** Summary
- Object orientation is about classes and methods (things the classes
  can do, but also about exchanging messages between objects (the
  ability to send and receive a message is a method, too).
- In Snap!, this will be mimicked by the ~broadcast~ and ~receive~ commands
- In BPMN you can model processes for different participants with
  pools and/or lanes and with sequence or message flow
- You can make sprites do repetitive actions with looping and gliding
  motions. You can create the illusion of smooth motions by combining
  ~repeat~ and motion commands.
- You can alter rotation style when a sprite hits an edge of the
  stage. This is a setting for every sprite (in the menu at the top).


* DONE Costume animation, geometry (June-19)
#+attr_html: :width 400px
[[../img/broadcast.jpg]]

** TODO Back on top! Quiz 3 results visualized (using R)
#+attr_latex: :width 400px
#+caption: Boxplots for quiz 1-3 (N=12,N=12,N=10)
[[../img/q1q2q3.png]]
** TODO Post your essay topic to the Snap!Chat now!

The Canvas page approach apparently did not work...
[[../img/page.png]]

** TODO Review - last week:

1) What is a model and why do we make models?
   #+begin_quote
   - Models are abstractions = taking details away systematically
   - Process models or flow charts are examples: e.g. the BPMN model
     of the Alonzo-Space Ranger conversation does not contain the
     waiting times between the statements or visual details.
   - Mathematical models are the most important models that we have,
     e.g. F[orce] = m[ass] * a[cceleration]. Which abstractions are
     involved here?
   #+end_quote
2) Is a Snap! script - e.g. showing a rotating tomato - a model?
   #+begin_quote
   - A Snap! script is based on a model, an abstraction of the real
     world (digital image of a tomato).
   - A Snap! script can also be considered a model on its own, since
     the code for 'motion' or 'looks' or 'sensing' only represents a
     reduced version of real motion, appearance or sensing.
   - You can combine mathematical models and scripting, e.g. by
     implementing physics: [[https://bit.ly/newtonSnap][bit.ly/newtonSnap]] 
   #+end_quote
   #+attr_latex: :width 300px
   [[../img/newton.png]]
3) What is the 'if on edge, bounce' effect? Where is it?
   #+begin_quote
   - Refers to the behavior of the sprite at the border.
   - If the effect is not set, the sprite will continue indefinitely.
   - If the effect is set, one of three rotation styles is active.
   #+end_quote

** Today: changing costumes / geometry / broadcasting
* DONE Broadcasting and storytelling (June-20)
#+attr_html: :width 400px
[[../img/highground.png]]

** Quiz 4: looping and costumes (9.30-9.45 am)
** Broadcasting commands
** "Circus" programming assignment
** Pair programming: Story with all you've got
 
* DONE Story presentations (June-21)
#+attr_html: :width 400px
[[../img/s6_keyboard.jpg]]

- Quiz results: pretty good but there're some outliers.
  #+attr_latex: :width 400px
  [[../img/q1-4box.png]]  [[../img/qDensity.png]]

- Continue your story animation project until +10:10+ 10:25 AM.

- Does "pair programming" even work?

- At +10:10+ 10:25 AM we'll look at all projects and critique them.

  1) [[https://snap.berkeley.edu/project?username=elizabeth%2ereaves&projectname=Gracie_and_the_Nope_Rope][Gracie and the Nope Rope]]

  2) [[https://snap.berkeley.edu/project?username=nico%20baldridge&projectname=Peaches%20][Peaches]]

  3) [[https://snap.berkeley.edu/project?username=ant1010&projectname=Story%20animation][Among Us]]

  4) [[https://snap.berkeley.edu/project?username=jorden%20harrell&projectname=GO%20GO%20PWER%20RANGERS][Power Rangers]]

  5) A New Hope

- We'll continue with "events", "effects" and "concurrency".

- There will be another quiz tomorrow!
  
* DONE Events and sensing / Bird or Ball (June 22)
#+attr_latex: :width 300px
[[../img/bird.png]]

** Quiz 4 from 9:30-10:00 AM (open book! Use it!)
** Quiz 5 - geometry and broadcasting
#+attr_latex: :width 300px
[[../img/kittyAndAbby.png]]

- Need to know more, or know more deeply?
  #+attr_latex: :width 400px
  [[../img/refman.png]]

- [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=quiz%205][Quiz 5 - geometry and broadcasting]]

- *What is absolute vs. relative motion?*
  #+begin_quote
  Absolute (position/direction independent):
  1) motion commands yield a vector that ends at a fixed point no
     matter where the sprite is before the command.
  2) The movement looks different depending on where the sprite was
     before the command.
   
   [[../img/snap_absolute.png]]

  Relative (position/direction dependent):
  1) motion commands yield a vector that could be anywhere in the
     plane. 
  2) The movement looks the same no matter where the sprite was
     before the command.

  [[../img/snap_relative.png]]

  This distinction is important for physics because of both special
  relativity (the laser sword!) and general relativity (E = mc**2).
   #+end_quote
 
* DONE Conditionals, keyboard input (June 23)
#+attr_latex: :width 400px
#+caption: Ted Dabney, Ex-Marine and co-creator of the Pong arcade game (1975)
[[../img/pong.png]]

- *Quiz 1-5 results:* held the average but some have got work to do
  #+attr_latex: :width 400px
  [[../img/quizDensity.png]]

- *Sample solutions: bird / ball* ([[https://lyon.instructure.com/courses/1721/assignments/14947][Canvas]] / my solution: [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=Ball][ball]] and [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=Bird][bird]])

- *Today:* conditional statements, keyboard input, mouse interaction

- *Programming assignment:* [[https://lyon.instructure.com/courses/1721/assignments/14948][ball and paddle / color circles]]
  1) ball and paddle: [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=Ping%20Pong%20%28Tyler%20Landry%29][sample solution by Tyler Landry]] (fall '22)
  2) color circles: [[https://snap.berkeley.edu/project?username=birkenkrahe&projectname=Color%20Circles%20%28Isaac%20Rice%29][sample solution by Isaac Rice]] (fall'22)


* NEXT Project helicopter (June 26)
#+attr_latex: :width 400px
[[../img/helicopter.jpg]]

- [[https://lyon.instructure.com/courses/1721/assignments/14957/edit?quiz_lti][Quiz 6: keyboard interaction and conditional statements]] (9:30-9:45 am)

- Programming assignment: [[https://lyon.instructure.com/courses/1721/assignments/14948][ball and paddle OR color circles]] (09:45-10:15 am):
  1) You do NOT need *variables* for either of these programs.
  2) You should not need to *'borrow'* other people's code.
  3) Ball: don't just use 'random' bounces but think about *physics*.
  
- [[https://lyon.instructure.com/courses/1721/assignments/14949][Classroom project: helicopter]] in groups of 3 (10:15-10:45 am):

  1) Get in three groups of three
  2) Action:
     - Use arrow keys to fly the helicopter: left/right arrows flip
       the helicopter from one side to the other, up/down arrows move
       it up/down.
     - Show gravity: if you do nothing, the helicopter move down.
     - Helicopter should be able to land on a helipad: a landing is
       successful only if the landing gear touches the helipad.
  3) Sprites:
     - Helicopter (costume is in library).
     - Landing pad
     - Cloud(s)
  4) Optional improvements:
     - Landscape - something like this:
       #+attr_latex: :width 400px
       [[../img/helicopter_landscape.png]]
     - Moving clouds.
     - Have some indication that the helicopter is running (like
       blinking lights or spinning fans).
     - Gravity effect: helicopter doesn't just move down but
       accelerates down.
     - Damage: helicopter explodes when it misses the landing pad.
     - Title screen with instructions, final screen with "Yay" message

- Upload and present your project(s) (10:45-10:55 am)

- Preview: introduction to Python / course / Colab notebooks

- Tomorrow: discuss some helicopter improvements!
  
* TODO Mouse interaction and variables (June 27)
* TODO Game of maze (June 28)
* TODO Operators, remote control (June 29)
* TODO Game of bricks (June 30)


* July 10-13: Robotics (Snap! and/or Python)
#+attr_latex: :width 400px
[[../img/finchsnap.png]] [[../img/finchpython.png]]

* READ Over the holidays: Introduction to Python

- To get a headstart on Python (we won't have much time), listen to
  the first 4 hours of [[https://youtu.be/nLRL_NcnK-4][this YouTube course]].

- This is a very engagingly presented course by a Harvard professor
  but to get the most out of it, don't just listen to it.

- Instead use your Chromebooks to open an IPython notebook at
  colab.research.google.com and type along with the presenter:
  #+attr_latex: :width 400px
  [[../img/cs50.png]]

- Feel free to contact me in the Snap!Chat ANY TIME with question on
  Python or on the colab online platform! I won't leave you hanging!


